[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[dependency-groups]
dev = [
    "bandit",
    "build",
    "bump-my-version",
    "cohesion",
    # The coverage==3.5.3 is difficult to analyze its dependencies by dependencies management tool,
    # so we should avoid 3.5.3 or lower.
    # - Command: "pipenv install --skip-lock" fails 
    #   since it tries to parse legacy package metadata and raise InstallError
    #   · Issue #5595 · pypa/pipenv
    #   https://github.com/pypa/pipenv/issues/5595
    "coverage>=3.5.4",
    # The dlint less than 0.14.0 limits max version of flake8.
    # - dlint/requirements.txt at 0.13.0 · dlint-py/dlint
    #   https://github.com/dlint-py/dlint/blob/0.13.0/requirements.txt#L1
    "dlint>=0.14.0",
    # To the docformatter load pyproject.toml settings:
    "docformatter[tomli]; python_version < '3.11'",
    "docformatter; python_version >= '3.11'",
    "dodgy",
    # The hacking depends flake8 ~=6.1.0 or ~=5.0.1 or ~=4.0.1.
    # We should avoid the versions that is not compatible with the hacking,
    # considering the speed of dependency calculation process
    "flake8!=6.0.0,!=5.0.0,>=4.0.1",
    # To replace E501 in pycodestyle with B950 in flake8-bugbear:
    # - Using Black with other tools - Black 25.1.0 documentation
    #   https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html#bugbear
    "flake8-bugbear",
    # To use flake8 --radon-show-closures
    "flake8-polyfill",
    # To use pyproject.toml for Flake8 configuration
    "Flake8-pyproject",
    # Latest hacking depends on legacy version of flake8, and legacy hacking doesn't narrow flake8 version.
    # When unpin hacking, it has possibility to install too legacy version of hacking.
    "hacking>=5.0.0; python_version >= '3.8'",
    "invokelint",
    "mypy",
    "pylint",
    "pyvelocity; python_version >= '3.9'",
    "radon<6.0.0",
    "ruff",
    "semgrep;python_version>='3.9' and platform_system=='Linux'",
    "types-invoke",
    "xenon",
]

[project]
name="pytest-resource-path"
version="1.4.1"
description = "Provides path for uniform access to test resources in isolated directory"
readme = "README.md"
requires-python = ">=3.7"
dependencies = [
  "pytest>=3.5.0",
]
license = {file = "LICENSE"}
authors = [
  {name = "Yukihiko Shinoda", email = "yuk.hik.future@gmail.com"},
]
maintainers = [
  {name = "Yukihiko Shinoda", email = "yuk.hik.future@gmail.com"}
]
keywords = [
    "pytest",
    "test",
    "fixture",
    "resource",
    "path",
    "pathlib",
]
classifiers=[
    "Development Status :: 5 - Production/Stable",
    "Framework :: Pytest",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Testing",
    "Topic :: System :: Filesystems",
    "Typing :: Typed",
]

[project.entry-points.pytest11]
resource-path = "pytest_resource_path"

[project.urls]
homepage = "https://github.com/yukihiko-shinoda/pytest-resource-path"
# documentation = "https://readthedocs.org"
repository = "https://github.com/yukihiko-shinoda/pytest-resource-path"
# changelog = "https://github.com/me/spam/blob/master/CHANGELOG.md"

[tool.bandit.assert_used]
skips = ["tests/*"]

[tool.bumpversion]
current_version = "1.4.1"
commit = true
tag = true

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[[tool.bumpversion.files]]
filename = "pytest_resource_path/__init__.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

[tool.coverage.report]
exclude_also = [
    # Assume `if TYPE_CHECKING: ... else: ...` block is covered · Issue #831 · nedbat/coveragepy
    #   https://github.com/nedbat/coveragepy/issues/831#issuecomment-517778185
    "if TYPE_CHECKING:",
    # Pylint will detect instead:
    # - abstract-method / W0223 - Pylint 2.17.0-dev0 documentation
    #   https://pylint.readthedocs.io/en/latest/user_guide/messages/warning/abstract-method.html
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.coverage.run]
source = ["pytest_resource_path"]

[tool.docformatter]
recursive = true
# For compatibility with Black
# - How to Configure docformatter — docformatter 1.7.5 documentation
#   https://docformatter.readthedocs.io/en/stable/configuration.html#a-note-on-options-to-control-styles
pre_summary_space = true
wrap-descriptions = 119
wrap-summaries = 119

[tool.flake8]
# For compatibility with Black:
# - Using Black with other tools - Black 25.1.0 documentation
#   https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html#bugbear
max_line_length = 108
extend_ignore = [
  # For compatibility with Black:
  # - Using Black with other tools - Black 25.1.0 documentation
  #   https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html#bugbear
  "E203",
  "E501",
  "E701",
  # 2025-05-24 Now openstack/hacking wasn't introduced into Ruff and sorting imports is mainly considered with isort.
  "H306",
  # Cohesion may be in experimental.
  "H601",
]
statistics = true
show_source = true
exclude = [
  ".venv",
]

[tool.mypy]
strict = true

[tool.pylint.basic]
docstring-min-length = "7"

[tool.pylint.format]
max-line-length = 119

[tool.pylint.options]
# Since this rule against single responsibility principle.
# - python - Why does Pylint want two public methods per class? - Stack Overflow
#   https://stackoverflow.com/a/40258006/12721873
min-public-methods = "1"

[tool.pytest.ini_options]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]
# log_cli = true
# log_cli_level = "DEBUG"
# log_format = "%(asctime)s %(process)d %(levelname)s %(name)s:%(filename)s:%(lineno)d %(message)s"

[tool.radon]
cc_min = "B"
show_complexity = true
show_mi = true

[tool.ruff]
line-length = 119

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    # lint.pydocstyle
    # Reason: Docstring may be missed since docstring-min-length is set.
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D105",    # Missing docstring in magic method
    "D106",    # Missing docstring in public nested class
    "D107",    # Missing docstring in __init__
    # Reason: First line may ends with function signature for expression.
    "D402",    # First line should not be the function’s “signature”
    # Reason: First line may ends with ":" for expression.
    "D415",    # First line should end with a period, question mark, or exclamation point
    # Reason: `Line too long` is checked by flake8-bugbear.
    "E501",    # Line too long ({width} > {limit})
]
unfixable = [
    # When fix `return a and b != ""` as `return a and b`, mypy will report warning:
    #   error: Incompatible return value type (got "Union[Literal[False], str]", expected "bool")  [return-value]
    "PLC1901",
]

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.setuptools]
zip-safe = false

[tool.setuptools.package-data]
"*" = ["py.typed"]
